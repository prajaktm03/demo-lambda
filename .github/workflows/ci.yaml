name: CI Part

on:
  push:
    branches:
      - main

jobs:
  CI:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: "us-east-1"

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Read Terraform Version
        id: tf_version
        run: echo "TF_VERSION=$(cat .terraform-version)" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Import existing resources to avoid conflicts
      - name: Import Existing Resources
        run: |
          terraform init
          terraform import aws_s3_bucket.lambda_deployment_bucket demo-lambda-deployment-bucket-nov || true
          terraform import aws_ecr_repository.lambda_deployment_repo lambda-deployment-repo || true
          terraform import aws_iam_role.lambda_role lambda_execution_role || true

      # Ensure Terraform state is refreshed before applying
      - name: Terraform Refresh
        run: terraform refresh

      # First, apply only the S3 bucket creation (if it didn't exist and needed to be created)
      - name: Run Terraform Apply for S3 Bucket
        run: |
          terraform apply -auto-approve -target=aws_s3_bucket.lambda_deployment_bucket

      # Build Lambda ZIP file from App folder
      - name: Build Lambda ZIP
        run: |
          mkdir -p build
          cd App
          zip -r ../build/demo_lambda_function.zip demo_lambda_function.py -x "*.git/*" "*.md"

      # Capture Terraform outputs (including ECR URL)
      - name: Capture Terraform Outputs
        id: tf_outputs
        run: |
          terraform output -json > tf_outputs.json
        shell: bash

      # Extract the ECR repository URL from the Terraform output JSON
      - name: Set ECR Repo URL
        run: |
          export ECR_REPO_URL=$(jq -r '.ecr_repo_url.value' tf_outputs.json)
          if [ -z "$ECR_REPO_URL" ]; then
            echo "ECR_REPO_URL is empty. Please check Terraform outputs."
            exit 1
          fi
          echo "ECR_REPO_URL=$ECR_REPO_URL" >> $GITHUB_ENV

      # Log in to ECR using the specified URL and region
      - name: Login to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO_URL

      # Build and push the Docker image to ECR
      - name: Push Lambda ZIP to ECR
        run: |
          docker build -t $ECR_REPO_URL:latest .
          docker push $ECR_REPO_URL:latest

      # Upload the Lambda ZIP to S3 (to be used in the CD step)
      - name: Upload to S3
        run: |
          aws s3 cp build/demo_lambda_function.zip s3://demo-lambda-deployment-bucket-nov/demo_lambda_function.zip

      # Run Terraform apply for the remaining resources, including the Lambda function
      - name: Run Terraform Apply for Lambda Deployment
        run: |
          terraform apply -auto-approve
